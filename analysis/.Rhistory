pos=0
for (i in 1:nb_row){
for (j in 1:nb_col)
{
#i=1
#j=1
pos=pos+1
if (pos<=length(tab_image))
{
path_image <- file.path(paste0("/",path_photo),tab_image[pos])
image <- EBImage::readImage(path_image)
image <- EBImage::resize(image, dim(image)[1]/sizered)
image <- EBImage::flop(image)
image <- EBImage::rotate(image,-90)
outputImage[(1+(i-1)*row_length):(row_length+(i-1)*row_length), (1+(j-1)*col_length):(col_length+(j-1)*col_length), ] <- image
}
}
}
#save the outputimage
jpeg::writeJPEG(outputImage, outputImageFileName)
}
#JPG Name
#' jpeg_name
#' add the name of the photo at the bottom of the photo and save in out_photo rep
#' @param path_photo where to find the original jpg photos
#' @param out_photo where to save the named photos
#' @param x x coordinate of the name on the photo
#' @param y y coordinate of the name on the photo
#' @param size size of the police
#' @param who allow to adapt the script to the dataset of flowers (flo) or inflorescence (inflo)
function(path_photo, out_photo, x, y, size,who){
# path_photo <- here::here("data","images",who,"jpg")
# out_photo <- here::here("data","images",who,"jpg_name")
# x=0.5
# y=0.005
# size=2
# who="flo"
files <- dir(path = path_photo, pattern = ".jpg")
for (i in 1:length(files)){
#i=2
#read file
img <- jpeg::readJPEG(file.path(path_photo,files[i]))
#get size
h <- dim(img)[1]
w <- dim(img)[2]
#open new file for output
jpeg(file.path(out_photo,files[i]), width = w, height = h)
par(mar = c(0,0,0,0), xpd = NA, mgp = c(0,0,0), oma = c(0,0,0,0), ann = F)
plot.new()
plot.window(0:1, 0:1)
#fill plot with image
usr <- par("usr")
rasterImage(img, usr[1], usr[3], usr[2], usr[4])
#add text
img_name <- gsub(paste0("_",who,".jpg"), "", files[i])
img_name <- gsub("_", " ", img_name)
img_name <- rutils::to_binomial_name(img_name)
text(x, y, img_name, cex = size, col = "#595959",font=3)
#close image
dev.off()
} # eo for
} # eo jpeg_name
#RENAME COL
#' rename_dfc
#' rename some columns of a data frame df
#' @param df dataframe
#' @param old.col.names names of the columns to rename
#' @param new.col.names new names
rename_dfc <- function(df, old.col.names, new.col.names){
for (i in 1:length(old.col.names)) names(df)[names(df) == old.col.names[i]] <- new.col.names[i]
df
}
signi <- function(p){
if (p>0.05) symbol="ns."
if ((p<=0.05) & (p>0.01)) symbol="*"
if ((p<=0.01) & (p>0.001)) symbol="**"
if (p<=0.001) symbol="***"
return(symbol)
}
allgroups <- list(c("White", "Non-white"))
whats <- c("Ethnicity")
library(imager)
for (i in 1:length(allgroups)){
#i=5
groups <- allgroups[[i]]
what <- whats[i]
cat("Group ",what,": ",paste(groups,collapse = " vs. "),"----","\n")
cat(" Computing Elos ...\n")
group_elos <- do.call(merge,lapply(groups, function(id){
#id <- groups[1]
matches <- data_matches_judge[data_matches_judge[,what]%in%id,]
matches$Loser <- NA
matches$Loser[matches$outcome==1]=matches$challenger_2[matches$outcome==1]
matches$Loser[matches$outcome==0]=matches$challenger_1[matches$outcome==0]
res_elo    <- EloChoice::elochoice(winner = matches$Winner, loser = matches$Loser,
startvalue = 1500, runs = eloruns)
scores <- cbind.data.frame(Idmages=names(EloChoice::ratings(res_elo, show="mean",drawplot = F)),
mean=EloChoice::ratings(res_elo, show="mean",drawplot = F),
var=EloChoice::ratings(res_elo, show="var",drawplot = T))
rm(res_elo)
scores[,3] <- sqrt(scores[,3])
colnames(scores) <- c("Id_images",paste0("Elo_",id),paste0("Elo_sd_",id))
scores
}))
# ggplot(group_elos, aes(x=group_elos[,paste0("Elo_",groups[1])], y=group_elos[,paste0("Elo_",groups[2])])) +
#   geom_point()+
#   geom_abline(slope=1, intercept = 0,linetype=3,color="gray")+
#   geom_smooth(method=lm , color="gray", fill="#ecebeb", se=TRUE,alpha = 0.5,size=0.5) + xlim(900, 2000) + ylim(900, 2000) +
#   xlab(paste0("Aesthetic (",groups[1]," years old)"))+ylab(paste0("Aesthetic (",groups[2]," years old)"))+
#   theme_bw()
cat(" Plotting ... \n")
df <- data.frame(x = group_elos[,paste0("Elo_",groups[1])],
y = group_elos[,paste0("Elo_",groups[2])],
names=group_elos[,"Id_images"])
tiff(here::here("figures_tables","Respondents",paste0("Resp_",groups[1],"_",groups[2],".tiff")), width = 1500, height = 1500)
plot.2d.lm_labels(scale=0.05,size = -50L,coord <- df,pathphoto <- here::here("data","BIG_FILES","images","png"),
xR=min(df$x),yR=max(df$y),colR="black",labelx=paste0("Aesthetic ",what," (",groups[1],")"),
labely=paste0("Aesthetic ",what," (",groups[2],")"),cexlab=3.5,cexaxis=2,
colline="#325395",lwline=8,df=df)
dev.off()
cat("\n")
}
#PLOT the respondent profiles RAW DATA Fig S1 -----
library(forcats)
respondents <- read.csv2(here::here("data","data_respondents_sub.csv"))
respondents
rm(list=ls(all=TRUE))
library(ggplot2)
source(here::here("R",'functions.R'))
install.packages('googlesheets4')
##get the file on google sheet
googlesheets4::gs4_auth(email = "douglas.cirino@usp.br")
data_resp_es <- data.frame(googlesheets4::read_sheet('https://docs.google.com/spreadsheets/d/1sOmYW9rmiywEM20NeU9OH-jL8P-IrYtCN_ZexMeApDQ/edit?usp=sharing'))
respondents <- read.csv2(here::here("data","data_respondents.csv"))
respondents
# Exclude the entire column of emails - for anonymous reasons!
data_respondents$email <- NULL
data_respondents <- read.csv2(here::here("data","data_respondents.csv"))
# Exclude the entire column of emails - for anonymous reasons!
data_respondents$email <- NULL
write.csv2(data_respondents,here::here('data','data_respondents.csv'),row.names = F)
respondents <- read.csv2(here::here("data","data_respondents.csv"))
respondents
rm(list=ls(all=TRUE))
library(ggplot2)
source(here::here("R",'functions.R'))
install.packages('googlesheets4')
install.packages("googlesheets4")
##get the file on google sheet
googlesheets4::gs4_auth(email = "douglas.cirino@usp.br")
data_resp_br <- as.data.frame(googlesheets4::read_sheet('https://docs.google.com/spreadsheets/d/1jzQcXRpqT2sivukmBUlHqmjscu4bX_rx-2vV91DjGQo/edit?usp=sharing',
col_types = "Dciccccccccccc"))
Sys.sleep(1)
data_resp_en <- as.data.frame(googlesheets4::read_sheet('https://docs.google.com/spreadsheets/d/1oP4_uC_O5j07pmOcCGeVM4AlZKb6qLEtuv4NDlUK7Yc/edit?usp=sharing',
col_types = "Dciccccccccccc"))
Sys.sleep(1)
data_resp_es <- data.frame(googlesheets4::read_sheet('https://docs.google.com/spreadsheets/d/1sOmYW9rmiywEM20NeU9OH-jL8P-IrYtCN_ZexMeApDQ/edit?usp=sharing'))
keep <- c(1,2,3,4,5,6,8,9,10,12,13,14)
data_resp_br <- data_resp_br[,keep]
data_resp_en <- data_resp_en[,keep]
data_resp_es <- data_resp_es[,keep]
colnames(data_resp_br) <- c("Time","Gender","Age","Live_in","Grew_up","Country","Education","Social_class","Ethicity","Color_blind","ID_Judge","email")
colnames(data_resp_en) <- c("Time","Gender","Age","Live_in","Grew_up","Country","Education","Social_class","Ethicity","Color_blind","ID_Judge","email")
colnames(data_resp_es) <- c("Time","Gender","Age","Live_in","Grew_up","Country","Education","Social_class","Ethicity","Color_blind","ID_Judge","email")
##add column survey
data_resp_br$Survey <- "BR"
data_resp_en$Survey <- "EN"
data_resp_es$Survey <- "ES"
data_resp_br$ID_Judge <- gsub("ID_JUGE","",data_resp_br$ID_Judge)
data_resp_en$ID_Judge <- gsub("ID_JUGE","",data_resp_en$ID_Judge)
data_resp_es$ID_Judge <- gsub("ID_JUGE","",data_resp_es$ID_Judge)
###Gender
data_resp_br$Gender[data_resp_br$Gender%in%"Feminino"] <- "Female"
data_resp_br$Gender[data_resp_br$Gender%in%"Masculino"] <- "Male"
data_resp_br$Gender[data_resp_br$Gender%in%"Outro"] <- "Other"
data_resp_br$Gender[data_resp_br$Gender%in%"Prefiro não dizer"] <- "Other"
data_resp_es$Gender[data_resp_es$Gender%in%"Femenino"] <- "Female"
data_resp_es$Gender[data_resp_es$Gender%in%"Masculino"] <- "Male"
data_resp_es$Gender[data_resp_es$Gender%in%"Otro"] <- "Other"
data_resp_es$Gender[data_resp_es$Gender%in%"Prefiero no contestar"] <- "Other"
data_resp_en$Gender[data_resp_en$Gender%in%"Prefer not answer"] <- "Other"
###Education
data_resp_en$Education[data_resp_en$Education%in%"Elementary school (primary education)"] <- "Elementary school"
data_resp_en$Education[data_resp_en$Education%in%"Highschool (secondary education)"] <- "High school"
data_resp_en$Education[data_resp_en$Education%in%"Master degree"] <- "Master"
data_resp_en$Education[data_resp_en$Education%in%"Doctorate/PhD"] <- "PhD"
data_resp_en$Education[data_resp_en$Education%in%"Universitary education (tertiary education)"] <- "Bachelor"
data_resp_br$Education[data_resp_br$Education%in%"Ensino Fundamental (Primário)"] <- "Elementary school"
data_resp_br$Education[data_resp_br$Education%in%"Ensino médio (Secundário ou Ginásio)"] <- "High school"
data_resp_br$Education[data_resp_br$Education%in%"Educação superior (Universidade ou Faculdade)"] <- "Bachelor"
data_resp_br$Education[data_resp_br$Education%in%"Mestrado"] <- "Master"
data_resp_br$Education[data_resp_br$Education%in%"Doutorado"] <- "PhD"
data_resp_es$Education[data_resp_es$Education%in%"Educación primaria"] <- "Elementary school"
data_resp_es$Education[data_resp_es$Education%in%"Educación secundaria"] <- "High school"
data_resp_es$Education[data_resp_es$Education%in%"Educación universitaria"] <- "Bachelor"
data_resp_es$Education[data_resp_es$Education%in%"Maestría"] <- "Master"
data_resp_es$Education[data_resp_es$Education%in%"Doctorado/PhD"] <- "PhD"
countries <- data.frame(readxl::read_xlsx(here::here("data","countries.xlsx"),col_names=T))
for (i in 1:nrow(data_resp_br)){
data_resp_br$Country[i] <- countries$EN[which(countries$BR%in%data_resp_br$Country[i])]
}
for (i in 1:nrow(data_resp_es)){
data_resp_es$Country[i] <- countries$EN[which(countries$ES%in%data_resp_es$Country[i])]
}
###Live in
data_resp_br$Live_in[data_resp_br$Live_in%in%"Metrópole ou cidade grande"] <- "Metropolis"
data_resp_br$Live_in[data_resp_br$Live_in%in%"Cidade de médio porte"] <- "Median city"
data_resp_br$Live_in[data_resp_br$Live_in%in%"Cidade pequena"] <- "Small city"
data_resp_br$Live_in[data_resp_br$Live_in%in%"Vila ou Vilarejo"] <- "Small city"
data_resp_br$Live_in[data_resp_br$Live_in%in%"Ambiente rural"] <- "Small city"
data_resp_es$Live_in[data_resp_es$Live_in%in%"Metrópolis"] <- "Metropolis"
data_resp_es$Live_in[data_resp_es$Live_in%in%"Ciudad mediana"] <- "Median city"
data_resp_es$Live_in[data_resp_es$Live_in%in%"Ciudad pequeña"] <- "Small city"
data_resp_es$Live_in[data_resp_es$Live_in%in%"Pueblo"] <- "Small city"
data_resp_es$Live_in[data_resp_es$Live_in%in%"Medio rural"] <- "Small city"
data_resp_en$Live_in[data_resp_en$Live_in%in%"Rural place"] <- "Small city"
data_resp_en$Live_in[data_resp_en$Live_in%in%"Village"] <- "Small city"
###Grew up
data_resp_br$Grew_up[data_resp_br$Grew_up%in%"Metrópole ou cidade grande"] <- "Metropolis"
data_resp_br$Grew_up[data_resp_br$Grew_up%in%"Cidade de médio porte"] <- "Median city"
data_resp_br$Grew_up[data_resp_br$Grew_up%in%"Cidade pequena"] <- "Small city"
data_resp_br$Grew_up[data_resp_br$Grew_up%in%"Vila ou Vilarejo"] <- "Small city"
data_resp_br$Grew_up[data_resp_br$Grew_up%in%"Ambiente rural"] <- "Small city"
data_resp_es$Grew_up[data_resp_es$Grew_up%in%"Metrópolis"] <- "Metropolis"
data_resp_es$Grew_up[data_resp_es$Grew_up%in%"Ciudad mediana"] <- "Median city"
data_resp_es$Grew_up[data_resp_es$Grew_up%in%"Ciudad pequeña"] <- "Small city"
data_resp_es$Grew_up[data_resp_es$Grew_up%in%"Pueblo"] <- "Small city"
data_resp_es$Grew_up[data_resp_es$Grew_up%in%"Medio rural"] <- "Small city"
data_resp_en$Grew_up[data_resp_en$Grew_up%in%"Rural place"] <- "Small city"
data_resp_en$Grew_up[data_resp_en$Grew_up%in%"Villagee"] <- "Small city"
###Social class
data_resp_br$Social_class[data_resp_br$Social_class%in%"Classe alta"] <- "Upper"
data_resp_br$Social_class[data_resp_br$Social_class%in%"Classe média-alta"] <- "Upper"
data_resp_br$Social_class[data_resp_br$Social_class%in%"Classe média"] <- "Middle"
data_resp_br$Social_class[data_resp_br$Social_class%in%"Classe média-baixa"] <- "Low"
data_resp_br$Social_class[data_resp_br$Social_class%in%"Classe baixa"] <- "Low"
data_resp_es$Social_class[data_resp_es$Social_class%in%"Clase alta"] <- "Upper"
data_resp_es$Social_class[data_resp_es$Social_class%in%"Clase media-alta"] <- "Upper"
data_resp_es$Social_class[data_resp_es$Social_class%in%"Clase media"] <- "Middle"
data_resp_es$Social_class[data_resp_es$Social_class%in%"Clase media-baja"] <- "Low"
data_resp_es$Social_class[data_resp_es$Social_class%in%"Clase baja"] <- "Low"
data_resp_en$Social_class[data_resp_en$Social_class%in%"Upper class"] <- "Upper"
data_resp_en$Social_class[data_resp_en$Social_class%in%"Upper-middle class"] <- "Upper"
data_resp_en$Social_class[data_resp_en$Social_class%in%"Middle class"] <- "Middle"
data_resp_en$Social_class[data_resp_en$Social_class%in%"Low-middle class"] <- "Low"
data_resp_en$Social_class[data_resp_en$Social_class%in%"Low class"] <- "Low"
###Color blind
data_resp_br$Color_blind[data_resp_br$Color_blind%in%"Sim"] <- "Yes"
data_resp_br$Color_blind[data_resp_br$Color_blind%in%"Não"] <- "No"
data_resp_es$Color_blind[data_resp_es$Color_blind%in%"Sí"] <- "Yes"
data_resp_es$Color_blind[data_resp_es$Color_blind%in%"No"] <- "No"
write.csv2(data_resp_br,here::here("data","data_resp_br.csv"),row.names = F)
write.csv2(data_resp_en,here::here("data","data_resp_en.csv"),row.names = F)
write.csv2(data_resp_es,here::here("data","data_resp_es.csv"),row.names = F)
data_respondents <- rbind(data_resp_br,data_resp_en,data_resp_es)
data_respondents <- data_respondents[data_respondents$Age>17,]
data_respondents$Age_class <- ifelse(data_respondents$Age<30, "18_24",
ifelse(data_respondents$Age>=25 & data_respondents$Age<60, "25_59","60_100"))
data_respondents$Age_class <- as.factor(data_respondents$Age_class)
data_respondents$Age_class <- as.ordered(data_respondents$Age_class)
data_respondents$email[!grepl("@",data_respondents$email)]=NA
data_respondents$email <- tolower(data_respondents$email)
# Exclude the entire column of emails - for anonymous reasons!
data_respondents$email <- NULL
write.csv2(data_respondents,here::here('data','data_respondents.csv'),row.names = F)
respondents <- read.csv2(here::here("data","data_respondents.csv"))
respondents <- respondents[!respondents$Color_blind%in%"Yes",]
respondents <- respondents[respondents$Country%in%"Brazil",]
respondents <- respondents[!respondents$Education%in%"Elementary school",]
respondents$Education <- factor(respondents$Education, levels=c("Bachelor","High school","Master","PhD"))
###Ethicity
library(dplyr)
# Create a new column 'Ethnicity' with the desired categories
respondents <- respondents %>%
mutate(
Ethnicity = case_when(
grepl("Branca|Blanco|White", Ethicity, ignore.case = TRUE) ~ "White",
grepl("Prefiero no contestar|Prefiro não informar|Prefer no answer", Ethicity, ignore.case = TRUE) ~ "Not answered",
TRUE ~ "Non-white"
)
)
# Display the updated data frame
print(respondents)
write.csv2(respondents,here::here('data','data_respondents_sub.csv'),row.names = F)
#PLOT the respondent profiles RAW DATA Fig S1 -----
library(forcats)
respondents <- read.csv2(here::here("data","data_respondents_sub.csv"))
textsize=3
axissize=12
ticks=10
hjust=-0.2
perct=0.2
library(ggplot2)
##time serie
times <- as.data.frame(table(respondents$Time))
colnames(times) <- c("date","respondents")
times$date <- as.Date(times$date)
ts <- ggplot(data=times, aes(x = date, y = respondents)) +
geom_col(fill="#74BDD6")+
theme_bw()+
theme(axis.text = element_text(size=ticks),axis.title=element_text(size=axissize))
ggsave(file=here::here("figures_tables","Fig_time.tiff"), ts,width = 12, height = 8, dpi = 200, units = "cm", device='tiff')
##gender
##https://cran.r-project.org/web/packages/treemapify/vignettes/introduction-to-treemapify.html
data_sub <- table(respondents$Gender)
data_sub <- data.frame(Gender=names(data_sub),value=as.vector(data_sub))
data_sub$per <- round((data_sub$value/sum(data_sub$value))*100,digit=1)
data_sub$per <- paste(data_sub$per,"%")
data_sub$Gender <- as.factor(data_sub$Gender)
data_sub$Gender <- factor(data_sub$Gender,levels=c("Male","Female","Other"))
Gender <- ggplot(data_sub, aes(value,Gender)) +
geom_col(aes(fill=Gender),show.legend = FALSE) +
theme_bw()+
theme(axis.text = element_text(size=ticks),axis.title=element_text(size=axissize))+
xlim(0,max(data_sub[,2])+perct*max(data_sub[,2]))+
xlab("# individuals")+ ylab("Gender")+
geom_text(aes(label = per),position=position_dodge(0.9),hjust=hjust,size=textsize)
##Ethnicity
data_sub <- table(respondents$Ethnicity)
data_sub <- data.frame(Ethnicity=names(data_sub),value=as.vector(data_sub))
data_sub$per <- round((data_sub$value/sum(data_sub$value))*100,digit=1)
data_sub$per <- paste(data_sub$per,"%")
data_sub$Ethnicity <- as.factor(data_sub$Ethnicity)
Ethnicity_plot <- ggplot(data_sub, aes(value,Ethnicity)) +
geom_col(aes(fill=Ethnicity),show.legend = FALSE) +
theme_bw()+
theme(axis.text = element_text(size=ticks),axis.title=element_text(size=axissize))+
xlim(0,max(data_sub[,2])+perct*max(data_sub[,2]))+
xlab("# individuals")+ ylab("Ethnicity")+
geom_text(aes(label = per),position=position_dodge(0.9),hjust=hjust,size=textsize)
##Color_blind
data_sub <- table(respondents$Color_blind)
data_sub <- data.frame(Color_blind=names(data_sub),value=as.vector(data_sub))
data_sub$per <- round((data_sub$value/sum(data_sub$value))*100,digit=1)
data_sub$per <- paste(data_sub$per,"%")
data_sub$Color_blind <- as.factor(data_sub$Color_blind)
data_sub$Color_blind <- factor(data_sub$Color_blind, levels=c("Yes", "No"))
Color_blind <- ggplot(data_sub, aes(value,Color_blind)) +
geom_col(aes(fill=Color_blind),show.legend = FALSE) +
theme_bw()+
theme(axis.text = element_text(size=ticks),axis.title=element_text(size=axissize))+
xlim(0,max(data_sub[,2])+perct*max(data_sub[,2]))+
xlab("# individuals")+ ylab("Color_blind")+
geom_text(aes(label = per),position=position_dodge(0.9),hjust=hjust,size=textsize)
##Age
data_sub <- respondents
data_sub$Gender <- as.factor(data_sub$Gender)
data_sub$Gender <- factor(data_sub$Gender,levels=c("Male","Female","Other"))
xmax <- max(table(cut(data_sub$Age, breaks=seq(0,100,5), right = FALSE)))+10
Age <- ggplot(data_sub, aes(y=Age, color=Gender, fill=Gender)) +
geom_histogram(alpha=0.6, binwidth = 5)+
scale_y_continuous(breaks = seq(0,100,10), labels = seq(0,100, 10))+
theme_bw()+
theme(axis.text = element_text(size=ticks),axis.title=element_text(size=axissize))+
xlim(0,xmax)+
xlab("# individuals")+
theme(legend.position = c(0.8, 0.75),legend.title=element_text(size=axissize),
legend.text=element_text(size=ticks))
##Age_class
data_sub <- table(respondents$Age_class)
data_sub <- data.frame(Age_class=names(data_sub),value=as.vector(data_sub))
data_sub$per <- round((data_sub$value/sum(data_sub$value))*100,digit=1)
data_sub$per <- paste(data_sub$per,"%")
data_sub$Age_class <- as.factor(data_sub$Age_class)
data_sub$Age_class <- factor(data_sub$Age_class, levels=c("18_29","30_59","60_100"))
Age_class <- ggplot(data_sub, aes(value,Age_class)) +
geom_col(aes(fill=Age_class),show.legend = FALSE) +
xlim(0,max(data_sub[,2])+(perct+0.02)*max(data_sub[,2]))+
theme_bw()+
theme(axis.text = element_text(size=ticks),axis.title=element_text(size=axissize))+
xlab("# individuals")+
ylab("Age_class")+
geom_text(aes(label = per),position=position_dodge(0.9),hjust=hjust,size=textsize)
##Education
data_sub <- table(respondents$Education)
data_sub <- data.frame(Education=names(data_sub),value=as.vector(data_sub))
data_sub$per <- round((data_sub$value/sum(data_sub$value))*100,digit=1)
data_sub$per <- paste(data_sub$per,"%")
data_sub$Education <- as.factor(data_sub$Education)
data_sub$Education <- factor(data_sub$Education, levels=c("Elementary school","High school", "Bachelor","Master","PhD"))
Education <- ggplot(data_sub, aes(value,Education)) +
geom_col(aes(fill=Education),show.legend = FALSE) +
xlim(0,max(data_sub[,2])+(perct+0.02)*max(data_sub[,2]))+
theme_bw()+
theme(axis.text = element_text(size=ticks),axis.title=element_text(size=axissize))+
xlab("# individuals")+
ylab("Education")+
geom_text(aes(label = per),position=position_dodge(0.9),hjust=hjust,size=textsize)
##Grew_up
data_sub <- table(respondents$Grew_up)
data_sub <- data.frame(Grew_up=names(data_sub),value=as.vector(data_sub))
data_sub$per <- round((data_sub$value/sum(data_sub$value))*100,digit=1)
data_sub$per <- paste(data_sub$per,"%")
data_sub$Grew_up <- as.factor(data_sub$Grew_up)
data_sub$Grew_up <- factor(data_sub$Grew_up, levels=c("Rural place","Village", "Small city","Median city","Metropolis"))
Grew_up <- ggplot(data_sub, aes(value,Grew_up)) +
geom_col(aes(fill=Grew_up),show.legend = FALSE) +
xlim(0,max(data_sub[,2])+(perct+0.02)*max(data_sub[,2]))+
theme_bw()+
theme(axis.text = element_text(size=ticks),axis.title=element_text(size=axissize))+
xlab("# individuals")+
ylab("Grew_up")+
geom_text(aes(label = per),position=position_dodge(0.9),hjust=hjust,size=textsize)
##Live_in
data_sub <- table(respondents$Live_in)
data_sub <- data.frame(Live_in=names(data_sub),value=as.vector(data_sub))
data_sub$per <- round((data_sub$value/sum(data_sub$value))*100,digit=1)
data_sub$per <- paste(data_sub$per,"%")
data_sub$Live_in <- as.factor(data_sub$Live_in)
data_sub$Live_in <- factor(data_sub$Live_in, levels=c("Rural place","Village", "Small city","Median city","Metropolis"))
Live_in <- ggplot(data_sub, aes(value,Live_in)) +
geom_col(aes(fill=Live_in),show.legend = FALSE) +
xlim(0,max(data_sub[,2])+(perct+0.02)*max(data_sub[,2]))+
theme_bw()+
theme(axis.text = element_text(size=ticks),axis.title=element_text(size=axissize))+
xlab("# individuals")+
ylab("Live_in")+
geom_text(aes(label = per),position=position_dodge(0.9),hjust=hjust,size=textsize)
##Social_class
data_sub <- table(respondents$Social_class)
data_sub <- data.frame(Social_class=names(data_sub),value=as.vector(data_sub))
data_sub$per <- round((data_sub$value/sum(data_sub$value))*100,digit=1)
data_sub$per <- paste(data_sub$per,"%")
data_sub$Social_class <- as.factor(data_sub$Social_class)
data_sub$Social_class <- factor(data_sub$Social_class, levels=c("Low","Low-middle", "Middle","Upper-middle","Upper"))
Social_class <- ggplot(data_sub, aes(value,Social_class)) +
geom_col(aes(fill=Social_class),show.legend = FALSE) +
xlim(0,max(data_sub[,2])+(perct+0.02)*max(data_sub[,2]))+
theme_bw()+
theme(axis.text = element_text(size=ticks),axis.title=element_text(size=axissize))+
xlab("# individuals")+
ylab("Social_class")+
geom_text(aes(label = per),position=position_dodge(0.9),hjust=hjust,size=textsize)
data_sub <- table(respondents$Country)
data_sub <- data_sub[order(data_sub,decreasing = T)]
data_sub <- data.frame(Country=names(data_sub),value=as.vector(data_sub))
data_sub$per <- round((data_sub$value/sum(data_sub$value))*100,digit=1)
data_sub$per <- paste(data_sub$per,"%")
data_sub$Country <- as.factor(data_sub$Country)
data_sub <- data_sub[1:8,]
data_sub$Country <- factor(data_sub$Country, levels=rev(as.character(data_sub$Country)))
Country <- ggplot(data_sub, aes(value,Country)) +
geom_col(aes(fill=Country),show.legend = FALSE) +
xlim(0,max(data_sub[,2])+(perct+0.02)*max(data_sub[,2]))+
theme_bw()+
theme(axis.text = element_text(size=ticks),axis.title=element_text(size=axissize))+
xlab("# individuals")+
ylab("Country")+
geom_text(aes(label = per),position=position_dodge(0.9),hjust=hjust,size=textsize)
##Survey
data_sub <- table(respondents$Survey)
data_sub <- data.frame(Survey=names(data_sub),value=as.vector(data_sub))
data_sub$per <- round((data_sub$value/sum(data_sub$value))*100,digit=1)
data_sub$per <- paste(data_sub$per,"%")
data_sub$Survey <- as.factor(data_sub$Survey)
data_sub$Survey <- factor(data_sub$Survey, levels=c("ES","EN","BR"))
Survey <- ggplot(data_sub, aes(value,Survey)) +
geom_col(aes(fill=Survey),show.legend = FALSE) +
xlim(0,max(data_sub[,2])+(perct+0.02)*max(data_sub[,2]))+
theme_bw()+
theme(axis.text = element_text(size=ticks),axis.title=element_text(size=axissize))+
xlab("# individuals")+
ylab("Survey")+
geom_text(aes(label = per),position=position_dodge(0.9),hjust=hjust,size=textsize)
library(gridExtra)
g <- arrangeGrob(Gender,Age,
Education,Social_class,
Ethnicity_plot,
Grew_up,Live_in,ncol=3) #generates g
ggsave(file=here::here("figures_tables","FigS1.1.tiff"), g,width = 35, height = 25, dpi = 200, units = "cm", device='tiff')
#PLOT the respondent profiles SUBSET DATA Fig S1_sub -----
library(forcats)
respondents <- read.csv2(here::here("data","data_respondents_sub.csv"))
textsize=3
axissize=12
ticks=10
hjust=-0.2
perct=0.2
##gender
##https://cran.r-project.org/web/packages/treemapify/vignettes/introduction-to-treemapify.html
data_sub <- table(respondents$Gender)
data_sub <- data.frame(Gender=names(data_sub),value=as.vector(data_sub))
data_sub$per <- round((data_sub$value/sum(data_sub$value))*100,digit=1)
data_sub$per <- paste(data_sub$per,"%")
data_sub$Gender <- as.factor(data_sub$Gender)
data_sub$Gender <- factor(data_sub$Gender,levels=c("Male","Female","Other"))
Gender <- ggplot(data_sub, aes(value,Gender)) +
geom_col(aes(fill=Gender),show.legend = FALSE) +
theme_bw()+
theme(axis.text = element_text(size=ticks),axis.title=element_text(size=axissize))+
xlim(0,max(data_sub[,2])+perct*max(data_sub[,2]))+
xlab("# individuals")+ ylab("Gender")+
geom_text(aes(label = per),position=position_dodge(0.9),hjust=hjust,size=textsize)
##Age_class
data_sub <- table(respondents$Age_class)
data_sub <- data.frame(Age_class=names(data_sub),value=as.vector(data_sub))
data_sub$per <- round((data_sub$value/sum(data_sub$value))*100,digit=1)
data_sub$per <- paste(data_sub$per,"%")
data_sub$Age_class <- as.factor(data_sub$Age_class)
data_sub$Age_class <- factor(data_sub$Age_class, levels=c("18_24","25_59","60_100"))
Age_class <- ggplot(data_sub, aes(value,Age_class)) +
geom_col(aes(fill=Age_class),show.legend = FALSE) +
xlim(0,max(data_sub[,2])+(perct+0.02)*max(data_sub[,2]))+
theme_bw()+
theme(axis.text = element_text(size=ticks),axis.title=element_text(size=axissize))+
xlab("# individuals")+
ylab("Age_class")+
geom_text(aes(label = per),position=position_dodge(0.9),hjust=hjust,size=textsize)
##Education
data_sub <- table(respondents$Education)
data_sub <- data.frame(Education=names(data_sub),value=as.vector(data_sub))
data_sub$per <- round((data_sub$value/sum(data_sub$value))*100,digit=1)
